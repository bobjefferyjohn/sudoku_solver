import functions as fn

puzzle1 = [
    [2, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 6, 0, 0, 0, 0, 9, 0, 3],
    [0, 0, 0, 6, 0, 9, 7, 5, 0],
    [0, 0, 5, 0, 0, 0, 0, 0, 4],
    [1, 2, 0, 0, 0, 0, 0, 8, 7],
    [8, 0, 0, 0, 0, 0, 5, 0, 0],
    [0, 9, 7, 3, 0, 8, 0, 0, 0],
    [3, 0, 2, 0, 0, 0, 0, 6, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 9],
]
puzzle2 = [
    [0, 2, 0, 4, 5, 6, 7, 8, 9],
    [4, 5, 6, 7, 0, 9, 1, 2, 3],
    [7, 8, 9, 1, 2, 3, 4, 5, 6],
    [2, 0, 4, 5, 6, 7, 8, 9, 1],
    [5, 6, 0, 8, 9, 1, 2, 3, 4],
    [8, 9, 1, 2, 3, 4, 5, 6, 7],
    [3, 4, 5, 6, 0, 8, 9, 1, 2],
    [6, 7, 8, 9, 1, 2, 3, 4, 5],
    [9, 1, 2, 3, 4, 5, 6, 7, 0],
]
puzzle3 = [
    [6, 0, 7, 5, 0, 0, 1, 0, 0],
    [0, 0, 1, 9, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 6, 0, 5],
    [1, 0, 5, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 4, 5, 0, 8, 0],
    [0, 0, 0, 0, 8, 0, 0, 2, 7],
    [0, 0, 0, 0, 0, 6, 3, 0, 0],
    [0, 2, 0, 0, 0, 0, 7, 1, 8],
    [0, 9, 0, 0, 0, 4, 0, 0, 0],
]

puzzle4 = [
    [0, 0, 0, 0, 0, 7, 0, 0, 2],
    [7, 0, 0, 6, 5, 0, 0, 0, 0],
    [5, 0, 4, 0, 0, 0, 9, 0, 0],
    [0, 6, 0, 2, 0, 3, 0, 4, 0],
    [0, 0, 0, 0, 6, 0, 3, 0, 0],
    [0, 0, 0, 7, 0, 5, 0, 0, 0],
    [0, 0, 2, 0, 0, 1, 6, 0, 3],
    [4, 0, 0, 0, 0, 6, 0, 1, 7],
    [0, 0, 0, 0, 0, 0, 4, 5, 0],
]

def solve(puzzle):
    if fn.test_board(puzzle):
        empty_list = fn.generate_empty_list(puzzle)
        move = 0
        while move < len(empty_list):
            row, col = empty_list[move]
            currval = puzzle[row][col]
            if not fn.find_next_move(puzzle, row, col, currval):
                puzzle[row][col] = 0
                move -= 1
            else:
                puzzle[row][col] = fn.find_next_move(puzzle, row, col, currval)
                move += 1
        return puzzle